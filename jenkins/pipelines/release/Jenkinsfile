pipeline {
  agent any

  environment{
    JDK_PATH = tool name: 'Java 8_152'
    JAVA_HOME = "${JDK_PATH}"
    MAVEN_DOCKER_IMAGE = 'maven:3.6-jdk-8'
  }

  stages{
    stage('Print params'){
      steps{
        echo "DEVELOPMENT_VERSION ${params.DEVELOPMENT_VERSION}"
        echo "RELEASE_VERSION ${params.RELEASE_VERSION}"
        echo "DRY_RUN ${params.DRY_RUN}"
        echo "CONFIG_FILE_ID ${params.CONFIG_FILE_ID}"
        echo "GIT_USER_NAME ${params.GIT_USER_NAME}"
        echo "GIT_USER_EMAIL ${params.GIT_USER_EMAIL}"
        
      }
    }
    stage('Preparation'){
      steps{
        sh 'git config user.name ${params.GIT_USER_NAME}'
        sh 'git config user.email ${params.GIT_USER_EMAIL}'
        echo 'getReleaseVersion: ' + getReleaseVersion(false)
      }
    }    
    stage('Build') {
      agent {
        docker {
          image "${MAVEN_DOCKER_IMAGE}"
          args "-v ${JDK_PATH}:${JDK_PATH}"
          reuseNode true
        }
      }
      steps {
        configFileProvider([configFile(fileId: "${params.CONFIG_FILE_ID}", variable: 'MAVEN_SETTINGS')]) {
          sh 'mvn --global-settings ${MAVEN_SETTINGS} clean install'
        }
      }   
    }

    stage('Results'){
      steps{
        junit '**/target/surefire-reports/TEST-*.xml'
        archiveArtifacts '**/target/*.jar'
      }
    }

    stage('Nexus') {
      agent {
        docker {
          image "${MAVEN_DOCKER_IMAGE}"
          args "-v ${JDK_PATH}:${JDK_PATH}"
          reuseNode true
        }
      }
      steps {
        configFileProvider([configFile(fileId: "${params.CONFIG_FILE_ID}", variable: 'MAVEN_SETTINGS')]) {
          sh 'mvn --global-settings ${MAVEN_SETTINGS} -Pskltp -DskipTests=true deploy'
        }
      }
    }

    stage('Deploy') {
      environment{
        MAVEN_POM_VERSION = readMavenPom().getVersion()
        DEPLOY_SERVER = "${params.DEPLOY_TO_TEST ? 'ine-tit-app04' : 'ine-dit-app04'}"
      }
      steps{
        sshagent(["${params.SSH_CREDENTIALS_ID}"]) {
          echo "MAVEN_POM_VERSION: ${MAVEN_POM_VERSION}"
          sh "scp vp-services-camel/target/*.jar ine-ntjp-build@${DEPLOY_SERVER}:/www/inera/home/ine-ntjp-build"
          sh "ssh -l ine-ntjp-build ${DEPLOY_SERVER} 'hostname; ls; sudo mv vp-services-camel*.jar /www/inera/releases/vp-camel; sudo sh /www/inera/releases/vp-camel/deploy-vp.sh ${MAVEN_POM_VERSION}'"
        }
      }
    }
  }
}

def getReleaseVersion(boolean isRelease) {
    def version = readMavenPom().getVersion()
    echo version
 
    if(isRelease){
        if(version.contains("-RC")){
            return version.substring(0, version.indexOf("-RC"))
        }
    } else {
        if(!version.contains("-RC")){
            return version.replace("-SNAPSHOT", "")+"-RC1";
        }
    }
    return version.replace("-SNAPSHOT", "")
}
